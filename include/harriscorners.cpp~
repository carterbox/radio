
#include <opencv2/opencv.hpp>
#include <opencv2/nonfree/nonfree.hpp>

using namespace cv;
using namespace std;

struct frame{
	int index = 0;
	Mat img;
	vector<KeyPoint> keypoints;
	Mat bag;
	Mat descriptors;
};

Mat getAllDescriptors( vector<frame>* frames );
void getPoints( frame* F, Ptr<DescriptorExtractor> describer, Ptr<FeatureDetector> detector );
void createDictionary( vector<frame>* frames, Mat* dictionary,
					   const string fdetector, const string fdescriptor );

int main( int argc, char** argv )
{
	initModule_nonfree();
	frame temp;
	temp.img = imread( argv[1], CV_LOAD_IMAGE_COLOR );
	
	vector<frame> frames;
	frames.push_back(temp);
	
	cout << "pushed back" << endl;
	Mat dic;
	
	createDictionary( &frames, &dic, "SIFT", "SIFT" );
	
	cout << "SUCCESS." << endl;
	return 0; 
}

void cull( vector<frame>* frames, int oneOutOf )
{
	vector<frame> temp;
	for( int i = 0; i < frames->size(); i+=oneOutOf )
		temp.push_back(frames->at(i));
	
	frames->resize(0);
	delete(frames);
	*frames = temp;
	return;
}

void createDictionary( vector<frame>* frames, Mat* dictionary,
					   const string fdetector, const string fdescriptor )
{
	
	Ptr<DescriptorExtractor> describer = DescriptorExtractor::create(fdescriptor);
	Ptr<FeatureDetector> detector = FeatureDetector::create(fdetector);
	
	TermCriteria criteria( CV_TERMCRIT_ITER+CV_TERMCRIT_EPS, 100, 0.001 );
    int dictionarySize = 1000;
    int retries = 3;
    int flags = KMEANS_PP_CENTERS;
	BOWKMeansTrainer Bot( dictionarySize, criteria, retries, KMEANS_PP_CENTERS );
	
	cout << "Made descriptors" << endl;
	
	for(int i = 0; i < frames->size(); i++)
	{
		getPoints( &frames->at(i), describer, detector );
		Bot.add(frames->at(i).descriptors);
	}
	
	cout << "Constructing vocab from " << Bot.descripotorsCount() << "descriptors." << endl;
	*dictionary = Bot.cluster();
	
	return;
}

void getPoints( frame* F, Ptr<DescriptorExtractor> describer, Ptr<FeatureDetector> detector )
//extracts features and decriptors from a frame
{
	printf("Detecting features...    ");
	detector->detect( F->img, F->keypoints );
	printf("FOUND %lu FEATURES\n", F->keypoints.size());

	printf("Computing descriptors...  ");
	describer->compute( F->img, F->keypoints, F->descriptors );
	printf("COMPUTED.\n");
	return;
}
